// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource bd {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  fullName  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  password  String
  role      UserRole @default(USER)

  provider   String?
  providerId String?

  cart      Cart?
  orders    Order[]
  verificationCode VerificationCode?
}

model Cart {
  id          Int      @id @default(autoincrement())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?     @unique
  token       String

  totalAmount Float    @default(0)

  cartItem    CartItem[]
}

model CartItem {
  id          Int      @id @default(autoincrement())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quantity    Int
  Ingredients Ingredient[]

  cart        Cart @relation(fields: [cartId], references: [id])
  cartId      Int

  productItem ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
}

model Order {
  id          Int      @id @default(autoincrement())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User        User? @relation(fields: [userId], references: [id])
  userId      Int?
  token       String

  totalAmount Float @default(0)
  status      OrderStatus
  paymentId   String?
  items       Json

  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  imageUrl    String[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  ingredients Ingredient[]

  productItem ProductItem[]
}

model ProductItem {
  id          Int      @id @default(autoincrement())
  name        String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product @relation(fields: [productId], references: [id])
  productId   Int

  price       Float
  size        Int?
  pizzaType   Int?

  cartItem CartItem[]
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  price       Float

  products    Product[]

  cartItem    CartItem[]
}

model VerificationCode {
  id          Int      @id @default(autoincrement())

  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique

  code        String   @unique

  createAt    DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELED
}

enum UserRole {
  ADMIN
  USER
}